#Pre-population data before simulating the transactions

INSERT INTO ADDRESS_TYPE (ADDRESS_TYPE_ID, ADDRESS_TYPE) VALUES
('S', 'Street'),
('A', 'Avenue');

INSERT INTO POSTAL_CODE (POSTAL_CODE, PROVINCE, CITY, COUNTRY) VALUES
('90210', 'CA', 'Beverly Hills', 'USA'),
('1010', '', 'Vienna', 'Austria'),
('28006', 'Madrid', 'Madrid', 'Spain');

INSERT INTO ADDRESS (ADDRESS_ID, ADDRESS_TYPE_ID, NAME, NUMBER, FLOOR, DOOR, POSTAL_CODE, COUNTRY) VALUES
(1, 'S', 'Maple Street', 123, 1, 2, '90210', 'USA'),
(2, 'A', 'Oak Avenue', 456, 2, NULL, '1010', 'Austria'),
(3, 'S', 'Maria de Molina', 22, 1, NULL, '28006', 'Spain');

INSERT INTO LOCATION_TYPE (TYPE_ID, LOCATION_TYPE) VALUES
('AP', 'Apple'),
('SA', 'Samsung'),
('AL', 'All Phone Store');

INSERT INTO LOCATION (LOCATION_ID, TYPE_ID, ADDRESS_ID) VALUES
('1234567890123', 'AP', 1),
('6987654321098', 'SA', 2),
('4321567890321', 'AL', 3);

INSERT INTO STORE (STORE_ID, LOCATION_ID, OPENING_DATE) VALUES
(1, '1234567890123','2023-10-01'),
(2, '6987654321098','2023-11-02'),
(3, '4321567890321','2023-12-03');

INSERT INTO CURRENCY (CURRENCY_ID, CURRENCY) VALUES
('USD', 'United States Dollar'),
('EUR', 'Euro');

INSERT INTO SALESPERSON (SALESPERSON_ID, STORE_ID, FIRST_NAME, LAST_NAME, HIRE_DATE, BIRTH_DATE, SALARY_CURRENCY, MONTHLY_SALARY) VALUES
(1, 1, 'John', 'Doe', '2023-06-01', '1990-04-15', 'USD', 2000.00),
(2, 2, 'Adam', 'Smith', '2023-08-10', '1985-08-20', 'EUR', 1500.00),
(3, 3, 'Juan', 'García', '2023-10-02', '1991-03-19', 'EUR', 1300.00),
(4, 3, 'María', 'López', '2023-10-03', '1991-03-19', 'EUR', 1300.00);

INSERT INTO BRAND (BRAND_ID, BRAND_NAME, HQ_COUNTRY, FOUNDING_DATE) VALUES
(1, 'Samsung', 'South Korea', '1938-03-01'),
(2, 'Apple', 'United States', '1976-04-01'),
(3, 'Huawei', 'China', '1987-09-15');

INSERT INTO COLOR (COLOR_ID, COLOR) VALUES
(1, 'Black'),
(2, 'White');

INSERT INTO SUPPLIER (SUPPLIER_ID, SUPPLIER_NAME, SUPPLIER_HQ, SUPPLIER_PHONE_NO) VALUES
(1, 'GlobalTechSuppliers', 'Singapore', '+6561234567'),
(2, 'InnovateCorp', 'Berlin', '+493012345678'),
(3, 'TechPioneers', 'London', '+442012345678');

INSERT INTO MODEL (MODEL_ID, DESCRIPTION) VALUES
(1, 'Galaxy'),
(2, 'iPhone');

INSERT INTO SERIES (SERIES_ID, DESCRIPTION) VALUES
(1, 'S'),
(2, 'Nova'),
(3, 'P');

INSERT INTO GENERATION (GENERATION_ID, DESCRIPTION) VALUES
(1, '23'),
(2, '15'),
(3, '10'),
(4, '50');

INSERT INTO PHONE_TYPE (PHONE_TYPE_ID, DESCRIPTION) VALUES
(1, 'Ultra'),
(2, 'Pro');

INSERT INTO PROCESSOR (PROCESSOR_ID, PROCESSOR_NAME, CPU_CORES, CLOCK_SPEED_GHz) VALUES
(1, 'Qualcomm Snapdragon', 8, 3.36),
(2, 'A16 Bionic', 6, 3.46);

INSERT INTO MAIN_CAMERA (CAMERA_ID, CAMERA_MP, VIDEO_RESOLUTION) VALUES
(1, 108, '4K'),
(2, 12, '1080p');

INSERT INTO WEIGHT (WEIGHT_CODE, WEIGHT_LABEL) VALUES
('GR', 'Grams'),
('OZ', 'Ounces');

INSERT INTO DISPLAY (DISPLAY_ID, SCREEN_SIZE_INCHES, SCREEN_SIZE_CM, RESOLUTION, TYPE) VALUES
(1, 6.5, 16.5, '2340x1080', 'AMOLED'),
(2, 7.0, 17.8, '3680x2040', 'AMOLED'),
(3, 5.8, 14.7, '1334x750', 'LCD');

INSERT INTO PRODUCT (PRODUCT_ID, BRAND_ID, SUPPLIER_ID, COLOR_ID, MODEL_ID, SERIES_ID, GENERATION_ID, PHONE_TYPE_ID, WEIGHT, WEIGHT_CODE, PROCESSOR_ID, CAMERA_ID, DISPLAY_ID) VALUES
('1234567891012', 1, 1, 1, 1, 1, 1, NULL, 150.00, 'GR', 1, 1, 1),
('4173924346736', 1, 1, 2, 1, 1, 1, 1, 200.00, 'GR', 1, 1, 2),
('5817356121412', 2, 3, 1, 2, NULL, 2, NULL, 5.64, 'OZ', 2, 2, 3),
('1346356234627', 2, 3, 1, 2, NULL, 2, 2, 6.70, 'OZ', 2, 2, 3),
('8762563567267', 3, 2, 2, NULL, 2, 3, NULL, 195.85, 'GR', 1, 2, 1),
('6134524713463', 3, 2, 2, NULL, 3, 4, 2, 195.85, 'GR', 1, 2, 1);

INSERT INTO GPC_SEGMENT (SEGMENT_ID, NAME, DESCRIPTION) 
VALUES (66000000, 'Communications', NULL);

INSERT INTO GPC_FAMILY (FAMILY_ID, NAME, DESCRIPTION, SEGMENT_ID) 
VALUES (66010000, 'Communications', NULL, 66000000);

INSERT INTO GPC_CLASS (CLASS_ID, NAME, DESCRIPTION, FAMILY_ID) 
VALUES (66010300, 'Mobile Communication Devices/Services', NULL, 66010000);

INSERT INTO GPC_CATEGORY (CATEGORY_ID, NAME, DESCRIPTION, CLASS_ID) VALUES (10001198, 'Mobile Phones/Smartphones', NULL, 66010300);

INSERT INTO GPC_CATEGORY_ATTRIBUTES (CATEGORY_ID, ATTRIBUTE_ID, NAME, DESCRIPTION) 
VALUES 
(10001198, 20001126, 'If Colour Screen', "Identifies product's colour screen presence."),
(10001198, 20002033, 'If MP3 Player', "Indicates product's MP3 playing capability."),
(10001198, 20002699, 'If Provider Ware', "Shows mobile operator branding status."),
(10001198, 20001125, 'If With Camera', "Indicates product's camera inclusion."),
(10001198, 20002700, 'If With Prepaid Packet', "Identifies pre-configured package with prepaid card."),
(10001198, 20002603, 'Input Registration', "Shows product's data entry method."),
(10001198, 20001127, 'System', "Identifies mobile phone system generation.");

INSERT INTO GPC_PRODUCT_ATTRIBUTES (PRODUCT_ID, CATEGORY_ID, ATTRIBUTE_ID) 
VALUES 
('1234567891012', 10001198, 20001126),
('1234567891012', 10001198, 20002033),
('1234567891012', 10001198, 20001125),
('4173924346736', 10001198, 20001126),
('4173924346736', 10001198, 20002033),
('4173924346736', 10001198, 20001125),
('5817356121412', 10001198, 20001126),
('5817356121412', 10001198, 20002033),
('5817356121412', 10001198, 20001125),
('1346356234627', 10001198, 20001126),
('1346356234627', 10001198, 20002033),
('1346356234627', 10001198, 20001125),
('8762563567267', 10001198, 20001126),
('8762563567267', 10001198, 20002033),
('8762563567267', 10001198, 20001125),
('6134524713463', 10001198, 20001126),
('6134524713463', 10001198, 20002033),
('6134524713463', 10001198, 20001125);

INSERT INTO PRICE (PRICE_ID, PRODUCT_ID, COST_CURRENCY, COST, PRICE_CURRENCY, PRICE) VALUES
(1, '1234567891012', 'USD', 450.00, 'EUR', 1399.99), #Samsung in Vienna
(2, '4173924346736', 'USD', 450.00, 'EUR', 1599.99), #Samsung Ultra in Madrid
(3, '5817356121412', 'EUR', 250.00, 'USD', 999.99), #iPhone in the US
(4, '1346356234627', 'EUR', 400.00, 'USD', 1299.99), #iPhone pro in the US
(5, '1346356234627', 'EUR', 400.00, 'EUR', 1099.99), #iPhone pro in Madrid
(6, '8762563567267', 'EUR', 250.00, 'EUR', 799.99), #Huawei Nova in Madrid
(7, '6134524713463', 'EUR', 300.00, 'EUR', 899.99); #Huawei P in Madrid

INSERT INTO CC_TYPE (CC_TYPE, DESCRIPTION) VALUES
('VI', 'Visa'),
('MC', 'MasterCard'),
('AE', 'AmericanExpress');

INSERT INTO INVENTORY (STORE_ID, PRODUCT_ID, STOCK_LEVEL) VALUES
(1, '5817356121412', 25), 
(1, '1346356234627', 10),
(2, '1234567891012', 15),
(3, '4173924346736', 20),
(3, '1346356234627', 50),
(3, '8762563567267', 40),
(3, '6134524713463', 30);

# Trying to simulate one-by-one transaction registry, which auto-increments the primary key in all the tables concerned (except for NUMSEQ) and uses the created primary keys from these tables as foreign keys when inserting data into dependent tables; it also updates the inventory level for the respective product: 

INSERT INTO CUSTOMER (FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, BIRTH_DATE) VALUES 
('Alice', 'Brown', 'alice.brown@email.com', '+12345551234', '1980-03-25');
SET @customer_id = LAST_INSERT_ID();
INSERT INTO CC_PAYMENT (CC_TYPE, BANK, CARD_NUMBER, CARD_EXP) VALUES
('VI', 'Global Bank', '1234567890124321', '2025-12-31');
SET @payment_id = LAST_INSERT_ID();
INSERT INTO TICKET (PURCHASE_TIME, SALESPERSON_ID, CUSTOMER_ID, PAYMENT_ID, STORE_ID, PRE_TAX_AMOUNT, TOTAL_TAX, TOTAL_AMOUNT, CURRENCY_ID) VALUES 
('2023-10-02 12:48:00', 1, @customer_id, @payment_id, 1, 2879.97, 720.00, 3599.97, 'USD');
SET @ticket_id = LAST_INSERT_ID();
INSERT INTO TICKET_ITEM (TICKET_ID, NUMSEQ, PRICE_ID, QUANTITY, PRICE) VALUES
(@ticket_id, 1, 3, 1, (SELECT PRICE FROM PRICE WHERE PRICE_ID = 3)),
(@ticket_id, 2, 4, 2, (SELECT PRICE FROM PRICE WHERE PRICE_ID = 4));
UPDATE INVENTORY I JOIN TICKET T ON I.STORE_ID = T.STORE_ID JOIN TICKET_ITEM TI ON T.TICKET_ID = TI.TICKET_ID
JOIN PRICE P ON TI.PRICE_ID = P.PRICE_ID
SET I.STOCK_LEVEL = I.STOCK_LEVEL - TI.QUANTITY
WHERE TI.TICKET_ID = @ticket_id AND TI.NUMSEQ = 1 AND P.PRODUCT_ID = I.PRODUCT_ID;
UPDATE INVENTORY I JOIN TICKET T ON I.STORE_ID = T.STORE_ID JOIN TICKET_ITEM TI ON T.TICKET_ID = TI.TICKET_ID
JOIN PRICE P ON TI.PRICE_ID = P.PRICE_ID
SET I.STOCK_LEVEL = I.STOCK_LEVEL - TI.QUANTITY
WHERE TI.TICKET_ID = @ticket_id AND TI.NUMSEQ = 2 AND P.PRODUCT_ID = I.PRODUCT_ID;

INSERT INTO CUSTOMER (FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, BIRTH_DATE) VALUES 
('Lukas', 'Schmidt', NULL, '+43660123456', '1992-05-15');
SET @customer_id = LAST_INSERT_ID();
INSERT INTO CC_PAYMENT (CC_TYPE, BANK, CARD_NUMBER, CARD_EXP) VALUES
('MC', 'Global Bank', '9876543210987654', '2024-11-30');
SET @payment_id = LAST_INSERT_ID();
INSERT INTO TICKET (PURCHASE_TIME, SALESPERSON_ID, CUSTOMER_ID, PAYMENT_ID, STORE_ID, PRE_TAX_AMOUNT, TOTAL_TAX, TOTAL_AMOUNT, CURRENCY_ID) VALUES 
('2023-10-12 15:25:00', 2, @customer_id, @payment_id, 2, 2238.4, 559.6, 2799.98, 'EUR');
SET @ticket_id = LAST_INSERT_ID();
INSERT INTO TICKET_ITEM (TICKET_ID, NUMSEQ, PRICE_ID, QUANTITY, PRICE) VALUES
(@ticket_id, 1, 1, 2, (SELECT PRICE FROM PRICE WHERE PRICE_ID = 1)); # vi 1
UPDATE INVENTORY I JOIN TICKET T ON I.STORE_ID = T.STORE_ID JOIN TICKET_ITEM TI ON T.TICKET_ID = TI.TICKET_ID
JOIN PRICE P ON TI.PRICE_ID = P.PRICE_ID
SET I.STOCK_LEVEL = I.STOCK_LEVEL - TI.QUANTITY
WHERE TI.TICKET_ID = @ticket_id AND TI.NUMSEQ = 1 AND P.PRODUCT_ID = I.PRODUCT_ID;

INSERT INTO CUSTOMER (FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, BIRTH_DATE) 
VALUES ('Carlos', 'García', 'carlos.garcia@email.es', '+34610234567', NULL);
SET @customer_id = LAST_INSERT_ID();
INSERT INTO CC_PAYMENT (CC_TYPE, BANK, CARD_NUMBER, CARD_EXP) VALUES
('AE', 'Bank of World', '123456589015124', '2024-04-30');
SET @payment_id = LAST_INSERT_ID();
INSERT INTO TICKET (PURCHASE_TIME, SALESPERSON_ID, CUSTOMER_ID, PAYMENT_ID, STORE_ID, PRE_TAX_AMOUNT, TOTAL_TAX, TOTAL_AMOUNT, CURRENCY_ID) VALUES 
('2023-10-15 16:08:00', 3, @customer_id, @payment_id, 3, 2527.98, 672.00, 3199.98, 'EUR');
SET @ticket_id = LAST_INSERT_ID();
INSERT INTO TICKET_ITEM (TICKET_ID, NUMSEQ, PRICE_ID, QUANTITY, PRICE) VALUES
(@ticket_id, 1, 2, 2, (SELECT PRICE FROM PRICE WHERE PRICE_ID = 2)); # ma 1
UPDATE INVENTORY I JOIN TICKET T ON I.STORE_ID = T.STORE_ID JOIN TICKET_ITEM TI ON T.TICKET_ID = TI.TICKET_ID
JOIN PRICE P ON TI.PRICE_ID = P.PRICE_ID
SET I.STOCK_LEVEL = I.STOCK_LEVEL - TI.QUANTITY
WHERE TI.TICKET_ID = @ticket_id AND TI.NUMSEQ = 1 AND P.PRODUCT_ID = I.PRODUCT_ID;

INSERT INTO CUSTOMER (FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, BIRTH_DATE) 
VALUES ('Sofía', 'López', NULL, '+34650456789', '1990-01-30');
SET @customer_id = LAST_INSERT_ID();
INSERT INTO CC_PAYMENT (CC_TYPE, BANK, CARD_NUMBER, CARD_EXP) VALUES
('MC', 'Global Bank', '1234567890139877', '2025-10-30');
SET @payment_id = LAST_INSERT_ID();
INSERT INTO TICKET (PURCHASE_TIME, SALESPERSON_ID, CUSTOMER_ID, PAYMENT_ID, STORE_ID, PRE_TAX_AMOUNT, TOTAL_TAX, TOTAL_AMOUNT, CURRENCY_ID) VALUES 
('2023-10-23 08:58:00', 4, @customer_id, @payment_id, 3, 2606.97, 693.00, 3299.97, 'EUR');
SET @ticket_id = LAST_INSERT_ID();
INSERT INTO TICKET_ITEM (TICKET_ID, NUMSEQ, PRICE_ID, QUANTITY, PRICE) VALUES
(@ticket_id, 1, 5, 3, (SELECT PRICE FROM PRICE WHERE PRICE_ID = 5)); # ma 2
UPDATE INVENTORY I JOIN TICKET T ON I.STORE_ID = T.STORE_ID JOIN TICKET_ITEM TI ON T.TICKET_ID = TI.TICKET_ID
JOIN PRICE P ON TI.PRICE_ID = P.PRICE_ID
SET I.STOCK_LEVEL = I.STOCK_LEVEL - TI.QUANTITY
WHERE TI.TICKET_ID = @ticket_id AND TI.NUMSEQ = 1 AND P.PRODUCT_ID = I.PRODUCT_ID;

INSERT INTO CC_PAYMENT (CC_TYPE, BANK, CARD_NUMBER, CARD_EXP) VALUES
('AE', 'Planet Bank', '1234567890145664', '2026-02-28'); 
SET @payment_id = LAST_INSERT_ID();
INSERT INTO TICKET (PURCHASE_TIME, SALESPERSON_ID, CUSTOMER_ID, PAYMENT_ID, STORE_ID, PRE_TAX_AMOUNT, TOTAL_TAX, TOTAL_AMOUNT, CURRENCY_ID) VALUES 
('2023-10-28 13:46:00', 3, NULL, @payment_id, 3, 631.99, 168.00, 799.99, 'EUR');
SET @ticket_id = LAST_INSERT_ID();
INSERT INTO TICKET_ITEM (TICKET_ID, NUMSEQ, PRICE_ID, QUANTITY, PRICE) VALUES
(@ticket_id, 1, 6, 1, (SELECT PRICE FROM PRICE WHERE PRICE_ID = 6)); # ma 3
UPDATE INVENTORY I JOIN TICKET T ON I.STORE_ID = T.STORE_ID JOIN TICKET_ITEM TI ON T.TICKET_ID = TI.TICKET_ID
JOIN PRICE P ON TI.PRICE_ID = P.PRICE_ID
SET I.STOCK_LEVEL = I.STOCK_LEVEL - TI.QUANTITY
WHERE TI.TICKET_ID = @ticket_id AND TI.NUMSEQ = 1 AND P.PRODUCT_ID = I.PRODUCT_ID;

INSERT INTO CUSTOMER (FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, BIRTH_DATE) VALUES
('Bob', 'Johnson', 'bob.johnson@email.com', '+17983215557', '1975-07-10');
SET @customer_id = LAST_INSERT_ID();
INSERT INTO CC_PAYMENT (CC_TYPE, BANK, CARD_NUMBER, CARD_EXP) VALUES
('VI', 'Global Bank', '1234567890155432', '2027-03-30');
SET @payment_id = LAST_INSERT_ID();
INSERT INTO TICKET (PURCHASE_TIME, SALESPERSON_ID, CUSTOMER_ID, PAYMENT_ID, STORE_ID, PRE_TAX_AMOUNT, TOTAL_TAX, TOTAL_AMOUNT, CURRENCY_ID) VALUES 
('2023-11-03 12:48:00', 1, @customer_id, @payment_id, 1, 799.99, 200.00, 999.99, 'USD');
SET @ticket_id = LAST_INSERT_ID();
INSERT INTO TICKET_ITEM (TICKET_ID, NUMSEQ, PRICE_ID, QUANTITY, PRICE) VALUES
(@ticket_id, 1, 3, 1, (SELECT PRICE FROM PRICE WHERE PRICE_ID = 3)); # us 2
UPDATE INVENTORY I JOIN TICKET T ON I.STORE_ID = T.STORE_ID JOIN TICKET_ITEM TI ON T.TICKET_ID = TI.TICKET_ID
JOIN PRICE P ON TI.PRICE_ID = P.PRICE_ID
SET I.STOCK_LEVEL = I.STOCK_LEVEL - TI.QUANTITY
WHERE TI.TICKET_ID = @ticket_id AND TI.NUMSEQ = 1 AND P.PRODUCT_ID = I.PRODUCT_ID;

INSERT INTO CUSTOMER (FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, BIRTH_DATE) VALUES 
('Alejandro', 'Martínez', 'alejandro.martinez@email.es', '+34615567890', '1978-12-12');
SET @customer_id = LAST_INSERT_ID();
INSERT INTO CC_PAYMENT (CC_TYPE, BANK, CARD_NUMBER, CARD_EXP) VALUES
('VI', 'Global Bank', '1234567890164567', '2024-12-30');
SET @payment_id = LAST_INSERT_ID();
INSERT INTO TICKET (PURCHASE_TIME, SALESPERSON_ID, CUSTOMER_ID, PAYMENT_ID, STORE_ID, PRE_TAX_AMOUNT, TOTAL_TAX, TOTAL_AMOUNT, CURRENCY_ID) VALUES 
('2023-11-08 16:27:00', 4, @customer_id, @payment_id, 3, 710.99, 189.00, 899.99, 'EUR');
SET @ticket_id = LAST_INSERT_ID();
INSERT INTO TICKET_ITEM (TICKET_ID, NUMSEQ, PRICE_ID, QUANTITY, PRICE) VALUES
(@ticket_id, 1, 7, 1, (SELECT PRICE FROM PRICE WHERE PRICE_ID = 7)); # ma 4
UPDATE INVENTORY I JOIN TICKET T ON I.STORE_ID = T.STORE_ID JOIN TICKET_ITEM TI ON T.TICKET_ID = TI.TICKET_ID
JOIN PRICE P ON TI.PRICE_ID = P.PRICE_ID
SET I.STOCK_LEVEL = I.STOCK_LEVEL - TI.QUANTITY
WHERE TI.TICKET_ID = @ticket_id AND TI.NUMSEQ = 1 AND P.PRODUCT_ID = I.PRODUCT_ID;

INSERT INTO CUSTOMER (FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, BIRTH_DATE) VALUES 
('Lucía', 'González', 'lucia.gonzalez@email.es', '+34 620 789012', NULL);
SET @customer_id = LAST_INSERT_ID();
INSERT INTO CC_PAYMENT (CC_TYPE, BANK, CARD_NUMBER, CARD_EXP) VALUES
('MC', 'Solar Bank', '1234567890171234', '2025-05-30');
SET @payment_id = LAST_INSERT_ID();
INSERT INTO TICKET (PURCHASE_TIME, SALESPERSON_ID, CUSTOMER_ID, PAYMENT_ID, STORE_ID, PRE_TAX_AMOUNT, TOTAL_TAX, TOTAL_AMOUNT, CURRENCY_ID) VALUES 
('2023-11-09 17:30:00', 4, @customer_id, @payment_id, 3, 3396.97, 903.00, 4299.97, 'EUR');
SET @ticket_id = LAST_INSERT_ID();
INSERT INTO TICKET_ITEM (TICKET_ID, NUMSEQ, PRICE_ID, QUANTITY, PRICE) VALUES
(@ticket_id, 1, 2, 2, (SELECT PRICE FROM PRICE WHERE PRICE_ID = 2)),
(@ticket_id, 2, 5, 1, (SELECT PRICE FROM PRICE WHERE PRICE_ID = 5)); # ma 5
UPDATE INVENTORY I JOIN TICKET T ON I.STORE_ID = T.STORE_ID JOIN TICKET_ITEM TI ON T.TICKET_ID = TI.TICKET_ID
JOIN PRICE P ON TI.PRICE_ID = P.PRICE_ID
SET I.STOCK_LEVEL = I.STOCK_LEVEL - TI.QUANTITY
WHERE TI.TICKET_ID = @ticket_id AND TI.NUMSEQ = 1 AND P.PRODUCT_ID = I.PRODUCT_ID;
UPDATE INVENTORY I JOIN TICKET T ON I.STORE_ID = T.STORE_ID JOIN TICKET_ITEM TI ON T.TICKET_ID = TI.TICKET_ID
JOIN PRICE P ON TI.PRICE_ID = P.PRICE_ID
SET I.STOCK_LEVEL = I.STOCK_LEVEL - TI.QUANTITY
WHERE TI.TICKET_ID = @ticket_id AND TI.NUMSEQ = 2 AND P.PRODUCT_ID = I.PRODUCT_ID;

INSERT INTO CC_PAYMENT (CC_TYPE, BANK, CARD_NUMBER, CARD_EXP) VALUES
('VI', 'Global Bank', '1234567890186543', '2026-11-30');
SET @payment_id = LAST_INSERT_ID();
INSERT INTO TICKET (PURCHASE_TIME, SALESPERSON_ID, CUSTOMER_ID, PAYMENT_ID, STORE_ID, PRE_TAX_AMOUNT, TOTAL_TAX, TOTAL_AMOUNT, CURRENCY_ID) VALUES 
('2023-11-10 15:05:00', 4, NULL, @payment_id, 3, 631.99, 168.00, 799.99, 'EUR');
SET @ticket_id = LAST_INSERT_ID();
INSERT INTO TICKET_ITEM (TICKET_ID, NUMSEQ, PRICE_ID, QUANTITY, PRICE) VALUES
(@ticket_id, 1, 6, 1, (SELECT PRICE FROM PRICE WHERE PRICE_ID = 6)); # ma 6
UPDATE INVENTORY I JOIN TICKET T ON I.STORE_ID = T.STORE_ID JOIN TICKET_ITEM TI ON T.TICKET_ID = TI.TICKET_ID
JOIN PRICE P ON TI.PRICE_ID = P.PRICE_ID
SET I.STOCK_LEVEL = I.STOCK_LEVEL - TI.QUANTITY
WHERE TI.TICKET_ID = @ticket_id AND TI.NUMSEQ = 1 AND P.PRODUCT_ID = I.PRODUCT_ID;


INSERT INTO CUSTOMER (FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, BIRTH_DATE) VALUES 
('Anna', 'Müller', 'anna.muller@email.at', '+43 699 345678', '1985-08-20');
SET @customer_id = LAST_INSERT_ID();
INSERT INTO CC_PAYMENT (CC_TYPE, BANK, CARD_NUMBER, CARD_EXP) VALUES
('MC', 'Solar Bank', '1234567890191928', '2027-05-30');
SET @payment_id = LAST_INSERT_ID();
INSERT INTO TICKET (PURCHASE_TIME, SALESPERSON_ID, CUSTOMER_ID, PAYMENT_ID, STORE_ID, PRE_TAX_AMOUNT, TOTAL_TAX, TOTAL_AMOUNT, CURRENCY_ID) VALUES 
('2023-11-12 07:46:00', 2, @customer_id, @payment_id, 2, 1119.20, 279.80, 1399.99, 'EUR');
SET @ticket_id = LAST_INSERT_ID();
INSERT INTO TICKET_ITEM (TICKET_ID, NUMSEQ, PRICE_ID, QUANTITY, PRICE) VALUES
(@ticket_id, 1, 1, 1, (SELECT PRICE FROM PRICE WHERE PRICE_ID = 1)); # vi 2
UPDATE INVENTORY I JOIN TICKET T ON I.STORE_ID = T.STORE_ID JOIN TICKET_ITEM TI ON T.TICKET_ID = TI.TICKET_ID
JOIN PRICE P ON TI.PRICE_ID = P.PRICE_ID
SET I.STOCK_LEVEL = I.STOCK_LEVEL - TI.QUANTITY
WHERE TI.TICKET_ID = @ticket_id AND TI.NUMSEQ = 1 AND P.PRODUCT_ID = I.PRODUCT_ID;


#Calculating the bonus of the salespeople that they received on November 1 for October and on December 1st for November:
INSERT INTO SALESPERSON_BONUS (SALESPERSON_ID, BONUS_CURRENCY, BONUS_DATE, BONUS) VALUES
(1, 'USD', '2023-11-01', COALESCE(CAST((SELECT SUM(TOTAL_AMOUNT) * 0.05 FROM TICKET WHERE SALESPERSON_ID = 1 AND MONTH(PURCHASE_TIME) = 10 AND YEAR(PURCHASE_TIME) = 2023) AS DECIMAL(10,2)), 0)),
(2, 'EUR', '2023-11-01', COALESCE(CAST((SELECT SUM(TOTAL_AMOUNT) * 0.05 FROM TICKET WHERE SALESPERSON_ID = 2 AND MONTH(PURCHASE_TIME) = 10 AND YEAR(PURCHASE_TIME) = 2023) AS DECIMAL(10,2)), 0)),
(3, 'EUR', '2023-11-01', COALESCE(CAST((SELECT SUM(TOTAL_AMOUNT) * 0.05 FROM TICKET WHERE SALESPERSON_ID = 3 AND MONTH(PURCHASE_TIME) = 10 AND YEAR(PURCHASE_TIME) = 2023) AS DECIMAL(10,2)), 0)),
(4, 'EUR', '2023-11-01', COALESCE(CAST((SELECT SUM(TOTAL_AMOUNT) * 0.05 FROM TICKET WHERE SALESPERSON_ID = 4 AND MONTH(PURCHASE_TIME) = 10 AND YEAR(PURCHASE_TIME) = 2023) AS DECIMAL(10,2)), 0)),
(1, 'USD', '2023-12-01', COALESCE(CAST((SELECT SUM(TOTAL_AMOUNT) * 0.05 FROM TICKET WHERE SALESPERSON_ID = 1 AND MONTH(PURCHASE_TIME) = 11 AND YEAR(PURCHASE_TIME) = 2023) AS DECIMAL(10,2)), 0)),
(2, 'EUR', '2023-12-01', COALESCE(CAST((SELECT SUM(TOTAL_AMOUNT) * 0.05 FROM TICKET WHERE SALESPERSON_ID = 2 AND MONTH(PURCHASE_TIME) = 11 AND YEAR(PURCHASE_TIME) = 2023) AS DECIMAL(10,2)), 0)),
(3, 'EUR', '2023-12-01', COALESCE(CAST((SELECT SUM(TOTAL_AMOUNT) * 0.05 FROM TICKET WHERE SALESPERSON_ID = 3 AND MONTH(PURCHASE_TIME) = 11 AND YEAR(PURCHASE_TIME) = 2023) AS DECIMAL(10,2)), 0)),
(4, 'EUR', '2023-12-01', COALESCE(CAST((SELECT SUM(TOTAL_AMOUNT) * 0.05 FROM TICKET WHERE SALESPERSON_ID = 4 AND MONTH(PURCHASE_TIME) = 11 AND YEAR(PURCHASE_TIME) = 2023) AS DECIMAL(10,2)), 0));