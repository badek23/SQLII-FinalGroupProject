CREATE TABLE ADDRESS_TYPE (
ADDRESS_TYPE_ID CHAR(1) NOT NULL PRIMARY KEY,
ADDRESS_TYPE VARCHAR(40) NOT NULL
);
CREATE TABLE POSTAL_CODE (
POSTAL_CODE VARCHAR(10) NOT NULL, #Postal codes around the world can include letters or special characters; zip codes exist only in the US
PROVINCE VARCHAR(30),
CITY VARCHAR(30) NOT NULL,
COUNTRY VARCHAR(30) NOT NULL,
PRIMARY KEY (POSTAL_CODE,COUNTRY)
); 
CREATE TABLE ADDRESS (
ADDRESS_ID BIGINT NOT NULL PRIMARY KEY CHECK (ADDRESS_ID > 0),
ADDRESS_TYPE_ID CHAR(1) NOT NULL,
NAME VARCHAR(40) NOT NULL,
NUMBER SMALLINT NOT NULL,
FLOOR SMALLINT,
DOOR SMALLINT CHECK (DOOR > 0),
POSTAL_CODE VARCHAR(10) NOT NULL,
COUNTRY VARCHAR(30) NOT NULL,
FOREIGN KEY (ADDRESS_TYPE_ID) REFERENCES 
ADDRESS_TYPE(ADDRESS_TYPE_ID),
FOREIGN KEY (POSTAL_CODE,COUNTRY) REFERENCES POSTAL_CODE 
(POSTAL_CODE,COUNTRY)
);
CREATE TABLE LOCATION_TYPE (
TYPE_ID CHAR(2) NOT NULL PRIMARY KEY,
LOCATION_TYPE VARCHAR(30) NOT NULL
);
CREATE TABLE LOCATION (
LOCATION_ID CHAR(13) NOT NULL PRIMARY KEY, #GLN Number 13 digits
TYPE_ID CHAR(2) NOT NULL,
ADDRESS_ID BIGINT NOT NULL,
FOREIGN KEY (TYPE_ID) REFERENCES LOCATION_TYPE(TYPE_ID),
FOREIGN KEY (ADDRESS_ID) REFERENCES ADDRESS(ADDRESS_ID)
);
CREATE TABLE STORE (
STORE_ID BIGINT NOT NULL PRIMARY KEY CHECK (STORE_ID > 0),
LOCATION_ID CHAR(13) NOT NULL,
OPENING_DATE DATE NOT NULL CHECK (OPENING_DATE >= '2023-10-01'),
FOREIGN KEY (LOCATION_ID) REFERENCES LOCATION(LOCATION_ID)
);
CREATE TABLE CURRENCY (
CURRENCY_ID CHAR(3) NOT NULL PRIMARY KEY,
CURRENCY VARCHAR(30) NOT NULL
);
CREATE TABLE SALESPERSON (
 SALESPERSON_ID BIGINT NOT NULL PRIMARY KEY CHECK (SALESPERSON_ID > 
0),
 STORE_ID BIGINT NOT NULL,
 FIRST_NAME VARCHAR(30) NOT NULL,
 LAST_NAME VARCHAR(30) NOT NULL,
 HIRE_DATE DATE NOT NULL CHECK (HIRE_DATE >= '2023-01-01'), # salespeople could be hired the year of the opening, not earlier
 BIRTH_DATE DATE NOT NULL CHECK (BIRTH_DATE > '1920-01-01'), # We love old people, but not too old for this job
 SALARY_CURRENCY CHAR(3) NOT NULL,
 MONTHLY_SALARY DECIMAL (10,2) NOT NULL DEFAULT 0 CHECK 
(MONTHLY_SALARY >= 0),
 FOREIGN KEY (STORE_ID) REFERENCES STORE(STORE_ID),
 FOREIGN KEY (SALARY_CURRENCY) REFERENCES CURRENCY(CURRENCY_ID)
);
CREATE TABLE SALESPERSON_BONUS ( 
BONUS_ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
SALESPERSON_ID BIGINT NOT NULL,
BONUS_CURRENCY CHAR(3) NOT NULL,
BONUS_DATE DATE NOT NULL CHECK (BONUS_DATE >= '2023-11-01'),
BONUS DECIMAL (10,2), # 5% OF ALL TRANSACTIONS BY THE SALESPERSON IN A GIVEN MONTH
FOREIGN KEY (SALESPERSON_ID) REFERENCES 
SALESPERSON(SALESPERSON_ID),
FOREIGN KEY (BONUS_CURRENCY) REFERENCES CURRENCY(CURRENCY_ID)
);
CREATE TABLE BRAND (
BRAND_ID BIGINT NOT NULL PRIMARY KEY CHECK (BRAND_ID > 0),
BRAND_NAME VARCHAR(20) NOT NULL,
HQ_COUNTRY VARCHAR(30),
FOUNDING_DATE DATE CHECK (FOUNDING_DATE > '1900-01-01')
);
CREATE TABLE SUPPLIER (
SUPPLIER_ID BIGINT NOT NULL PRIMARY KEY CHECK (SUPPLIER_ID > 0),
SUPPLIER_NAME VARCHAR(30) NOT NULL,
SUPPLIER_HQ VARCHAR(20),
SUPPLIER_PHONE_NO VARCHAR(15) NOT NULL
);
CREATE TABLE COLOR (
COLOR_ID BIGINT NOT NULL PRIMARY KEY CHECK (COLOR_ID > 0),
COLOR VARCHAR(15) NOT NULL
);
CREATE TABLE MODEL (
MODEL_ID BIGINT NOT NULL PRIMARY KEY CHECK (MODEL_ID > 0),
DESCRIPTION VARCHAR(20)
);
CREATE TABLE SERIES (
SERIES_ID BIGINT NOT NULL PRIMARY KEY CHECK (SERIES_ID > 0),
DESCRIPTION VARCHAR(10) NOT NULL
);
CREATE TABLE GENERATION (
GENERATION_ID BIGINT NOT NULL PRIMARY KEY CHECK (GENERATION_ID > 0),
DESCRIPTION VARCHAR(20)
);
CREATE TABLE PHONE_TYPE (
PHONE_TYPE_ID BIGINT NOT NULL PRIMARY KEY CHECK (PHONE_TYPE_ID > 0),
DESCRIPTION VARCHAR(20)
);
CREATE TABLE PROCESSOR (
PROCESSOR_ID BIGINT NOT NULL PRIMARY KEY CHECK (PROCESSOR_ID > 0),
PROCESSOR_NAME VARCHAR(50) NOT NULL,
CPU_CORES INTEGER,
CLOCK_SPEED_GHz DECIMAL(5,2) # both factors are indicators of processor speed and efficiency
);
CREATE TABLE MAIN_CAMERA (
CAMERA_ID BIGINT NOT NULL PRIMARY KEY CHECK (CAMERA_ID > 0),
CAMERA_MP INTEGER,
VIDEO_RESOLUTION VARCHAR(50)
);
CREATE TABLE WEIGHT (
WEIGHT_CODE CHAR(2) NOT NULL PRIMARY KEY,
WEIGHT_LABEL VARCHAR(10) NOT NULL
);
CREATE TABLE DISPLAY (
DISPLAY_ID BIGINT NOT NULL PRIMARY KEY CHECK (DISPLAY_ID > 0),
SCREEN_SIZE_INCHES DECIMAL(3, 1),
SCREEN_SIZE_CM DECIMAL(3,1),
RESOLUTION VARCHAR(50),
TYPE VARCHAR(50)
);
CREATE TABLE PRODUCT (
PRODUCT_ID VARCHAR(13) NOT NULL PRIMARY KEY CHECK 
(LENGTH(PRODUCT_ID) = 12 OR LENGTH(PRODUCT_ID) = 13), #BARCODES MUST BE SET TO 12 OR 13 NUMBERS LONG - ASSUMING THEY DO NOT START FROM 0
BRAND_ID BIGINT NOT NULL,
SUPPLIER_ID BIGINT NOT NULL,
COLOR_ID BIGINT,
MODEL_ID BIGINT,
SERIES_ID BIGINT,
GENERATION_ID BIGINT,
PHONE_TYPE_ID BIGINT,
WEIGHT DECIMAL(10,2) NOT NULL CHECK (WEIGHT > 0),
WEIGHT_CODE CHAR(2) NOT NULL,
PROCESSOR_ID BIGINT NOT NULL,
CAMERA_ID BIGINT NOT NULL,
DISPLAY_ID BIGINT NOT NULL,
FOREIGN KEY (BRAND_ID) REFERENCES BRAND(BRAND_ID),
FOREIGN KEY (SUPPLIER_ID) REFERENCES SUPPLIER(SUPPLIER_ID),
FOREIGN KEY (COLOR_ID) REFERENCES COLOR(COLOR_ID),
FOREIGN KEY (MODEL_ID) REFERENCES MODEL(MODEL_ID),
FOREIGN KEY (SERIES_ID) REFERENCES SERIES(SERIES_ID),
FOREIGN KEY (GENERATION_ID) REFERENCES GENERATION(GENERATION_ID),
FOREIGN KEY (WEIGHT_CODE) REFERENCES WEIGHT(WEIGHT_CODE),
FOREIGN KEY (PHONE_TYPE_ID) REFERENCES PHONE_TYPE(PHONE_TYPE_ID),
FOREIGN KEY (PROCESSOR_ID) REFERENCES PROCESSOR(PROCESSOR_ID),
FOREIGN KEY (CAMERA_ID) REFERENCES MAIN_CAMERA(CAMERA_ID),
FOREIGN KEY (DISPLAY_ID) REFERENCES DISPLAY(DISPLAY_ID)
);
CREATE TABLE PRICE (
PRICE_ID BIGINT NOT NULL PRIMARY KEY CHECK (PRICE_ID > 0),
PRODUCT_ID VARCHAR(13) NOT NULL,
COST_CURRENCY CHAR(3) NOT NULL, #we have both cost and price currencies because phones might be bought and sold in different countries and currencies
COST DECIMAL(10,2) NOT NULL CHECK (COST >= 0),
PRICE_CURRENCY CHAR(3) NOT NULL,
PRICE DECIMAL(10,2) NOT NULL CHECK (PRICE >= 0),
FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID),
FOREIGN KEY (COST_CURRENCY) REFERENCES CURRENCY(CURRENCY_ID),
FOREIGN KEY (PRICE_CURRENCY) REFERENCES CURRENCY(CURRENCY_ID)
);
CREATE TABLE GPC_SEGMENT (
 SEGMENT_ID BIGINT NOT NULL PRIMARY KEY,
 NAME VARCHAR(50) NOT NULL,
 DESCRIPTION VARCHAR(128)
);
# INSERT ONE LINE
CREATE TABLE GPC_FAMILY (
 FAMILY_ID BIGINT NOT NULL PRIMARY KEY,
 NAME VARCHAR(50) NOT NULL,
 DESCRIPTION VARCHAR(128),
 SEGMENT_ID BIGINT NOT NULL,
 FOREIGN KEY (SEGMENT_ID) REFERENCES GPC_SEGMENT(SEGMENT_ID)
);
# INSERT ONE LINE
CREATE TABLE GPC_CLASS (
 CLASS_ID BIGINT NOT NULL PRIMARY KEY,
 NAME VARCHAR(50) NOT NULL,
 DESCRIPTION VARCHAR(128),
 FAMILY_ID BIGINT,
 FOREIGN KEY (FAMILY_ID) REFERENCES GPC_FAMILY(FAMILY_ID)
);
# INSERT ONE LINE
CREATE TABLE GPC_CATEGORY (
 CATEGORY_ID BIGINT NOT NULL PRIMARY KEY,
 NAME VARCHAR(50) NOT NULL,
 DESCRIPTION VARCHAR(128),
 CLASS_ID BIGINT NOT NULL,
 FOREIGN KEY (CLASS_ID) REFERENCES GPC_CLASS(CLASS_ID)
);
# Ex: IF WITH CAMERA, IF ……
CREATE TABLE GPC_CATEGORY_ATTRIBUTES (
 CATEGORY_ID BIGINT NOT NULL,
 ATTRIBUTE_ID BIGINT NOT NULL,
 NAME VARCHAR(50) NOT NULL,
 DESCRIPTION VARCHAR(128),
 PRIMARY KEY (CATEGORY_ID, ATTRIBUTE_ID),
 FOREIGN KEY (CATEGORY_ID) REFERENCES GPC_CATEGORY(CATEGORY_ID)
);
CREATE TABLE GPC_PRODUCT_ATTRIBUTES (
 PRODUCT_ID VARCHAR(13) NOT NULL,
 CATEGORY_ID BIGINT NOT NULL,
 ATTRIBUTE_ID BIGINT NOT NULL,
 PRIMARY KEY (PRODUCT_ID, CATEGORY_ID, ATTRIBUTE_ID),
 FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID),
 FOREIGN KEY (CATEGORY_ID, ATTRIBUTE_ID) REFERENCES 
GPC_CATEGORY_ATTRIBUTES(CATEGORY_ID, ATTRIBUTE_ID)
);
# there are no Attribute Values for Mobile Phones on the GPC website, so this table was not considered
CREATE TABLE INVENTORY (
 STORE_ID BIGINT NOT NULL,
 PRODUCT_ID VARCHAR(13) NOT NULL,
 STOCK_LEVEL INTEGER NOT NULL,
 PRIMARY KEY (STORE_ID, PRODUCT_ID),
 FOREIGN KEY (STORE_ID) REFERENCES STORE(STORE_ID),
 FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID)
);
CREATE TABLE CC_TYPE (
CC_TYPE CHAR(2) NOT NULL PRIMARY KEY,
DESCRIPTION VARCHAR(20) NOT NULL
);
CREATE TABLE CC_PAYMENT (
PAYMENT_ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY ,
CC_TYPE CHAR(2),
BANK VARCHAR(30),
CARD_NUMBER BIGINT NOT NULL,
CARD_EXP DATE NOT NULL,
FOREIGN KEY (CC_TYPE) REFERENCES CC_TYPE(CC_TYPE)
);
CREATE TABLE CUSTOMER (
CUSTOMER_ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
FIRST_NAME VARCHAR(50) NOT NULL,
LAST_NAME VARCHAR(50) NOT NULL,
EMAIL VARCHAR(100),
PHONE_NUMBER VARCHAR(15) NOT NULL,
BIRTH_DATE DATE CHECK (BIRTH_DATE > '1920-01-01')
);
CREATE TABLE TICKET (
TICKET_ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
PURCHASE_TIME TIMESTAMP NOT NULL,
SALESPERSON_ID BIGINT NOT NULL,
CUSTOMER_ID BIGINT,
PAYMENT_ID BIGINT NOT NULL,
STORE_ID BIGINT NOT NULL,
PRE_TAX_AMOUNT DECIMAL(8,2) NOT NULL,
TOTAL_TAX DECIMAL(8,2) NOT NULL,
TOTAL_AMOUNT DECIMAL(8,2) NOT NULL,
CURRENCY_ID CHAR(3) NOT NULL, 
FOREIGN KEY (SALESPERSON_ID) REFERENCES 
SALESPERSON(SALESPERSON_ID),
FOREIGN KEY(PAYMENT_ID) REFERENCES CC_PAYMENT (PAYMENT_ID),
FOREIGN KEY(STORE_ID) REFERENCES STORE(STORE_ID),
FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER (CUSTOMER_ID),
FOREIGN KEY(CURRENCY_ID) REFERENCES CURRENCY(CURRENCY_ID)
);
CREATE TABLE TICKET_ITEM (
TICKET_ID BIGINT NOT NULL,
NUMSEQ SMALLINT NOT NULL CHECK (NUMSEQ > 0),
PRICE_ID BIGINT NOT NULL,
QUANTITY SMALLINT NOT NULL CHECK (QUANTITY > 0),
PRICE DECIMAL(10,2) NOT NULL,
PRIMARY KEY (TICKET_ID, NUMSEQ),
FOREIGN KEY (TICKET_ID) REFERENCES TICKET(TICKET_ID),
FOREIGN KEY (PRICE_ID) REFERENCES PRICE(PRICE_ID)
);
-- ---------------------------------------- --
-- Triggers for DATE or TIMESTAMP attributes --
DELIMITER //
CREATE TRIGGER StoreOpened
BEFORE INSERT ON STORE
FOR EACH ROW
BEGIN
 IF NEW.OPENING_DATE > CURRENT_DATE() THEN
 SIGNAL SQLSTATE '45000'
 SET MESSAGE_TEXT = "A store cannot be opened in the future."; 
 END IF;
END; //
DELIMITER ;
DELIMITER //
CREATE TRIGGER BonusDates
BEFORE INSERT ON SALESPERSON_BONUS
FOR EACH ROW
BEGIN
 IF (NEW.BONUS_DATE > CURRENT_DATE()) THEN
 SIGNAL SQLSTATE '45000'
 SET MESSAGE_TEXT = 'Cannot set a bonus date in the future.';
 END IF;
END; //
DELIMITER ;
DELIMITER //
CREATE TRIGGER HireDateSalesperson
BEFORE INSERT ON SALESPERSON
FOR EACH ROW
BEGIN
 IF NEW.HIRE_DATE > CURRENT_DATE() THEN
 SIGNAL SQLSTATE '45000'
 SET MESSAGE_TEXT = "Cannot hire people in the future."; 
 END IF;
END; //
DELIMITER ;
DELIMITER //
CREATE TRIGGER BirthDateSalesperson
BEFORE INSERT ON SALESPERSON
FOR EACH ROW
BEGIN
 IF (NEW.BIRTH_DATE > CURRENT_DATE() - INTERVAL 14 YEAR) THEN
 SIGNAL SQLSTATE '45000'
 SET MESSAGE_TEXT = "Cannot hire people below 14 years old."; 
 END IF;
END; //
DELIMITER ;
DELIMITER //
CREATE TRIGGER BrandFounded
BEFORE INSERT ON BRAND
FOR EACH ROW
BEGIN
 IF NEW.FOUNDING_DATE > CURRENT_DATE() THEN
 SIGNAL SQLSTATE '45000'
 SET MESSAGE_TEXT = "A brand cannot be founded in the future."; 
 END IF;
END; //
DELIMITER ;
DELIMITER //
CREATE TRIGGER PurchaseTimeTicket
BEFORE INSERT ON TICKET
FOR EACH ROW
BEGIN
 IF NEW.PURCHASE_TIME > CURRENT_TIMESTAMP() OR NEW.PURCHASE_TIME < 
"2023-10-01 00:00:00" THEN
 SIGNAL SQLSTATE '45000'
 SET MESSAGE_TEXT = "Cannot set the purchase time in the future or before the 
company opened."; 
 END IF;
END; //
DELIMITER ;
-- Selecting the constraints:
-- SELECT *
-- FROM information_schema.check_constraints
-- WHERE constraint_schema = 'Group2_Project';